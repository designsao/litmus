{"version":3,"file":"nft_mint.js","sources":["../node_modules/near-sdk-js/lib/types/vm_types.js","../node_modules/near-sdk-js/lib/utils.js","../node_modules/@scure/base/lib/esm/index.js","../node_modules/near-sdk-js/lib/types/public_key.js","../node_modules/near-sdk-js/lib/api.js","../node_modules/near-sdk-js/lib/near-bindgen.js","../node_modules/near-sdk-js/lib/collections/lookup-map.js","../node_modules/near-sdk-js/lib/collections/vector.js","../node_modules/near-sdk-js/lib/collections/lookup-set.js","../node_modules/near-sdk-js/lib/collections/unordered-map.js","../node_modules/near-sdk-js/lib/collections/unordered-set.js","../src/metadata.ts","../src/internal.ts","../src/mint.ts","../src/nft_core.ts","../src/enumeration.ts","../src/approval.ts","../src/contract.ts"],"sourcesContent":["export var PromiseResult;\n(function (PromiseResult) {\n    PromiseResult[PromiseResult[\"NotReady\"] = 0] = \"NotReady\";\n    PromiseResult[PromiseResult[\"Successful\"] = 1] = \"Successful\";\n    PromiseResult[PromiseResult[\"Failed\"] = 2] = \"Failed\";\n})(PromiseResult || (PromiseResult = {}));\nexport var PromiseError;\n(function (PromiseError) {\n    PromiseError[PromiseError[\"Failed\"] = 0] = \"Failed\";\n    PromiseError[PromiseError[\"NotReady\"] = 1] = \"NotReady\";\n})(PromiseError || (PromiseError = {}));\n","export function u8ArrayToBytes(array) {\n    let ret = \"\";\n    for (let e of array) {\n        ret += String.fromCharCode(e);\n    }\n    return ret;\n}\n// TODO this function is a bit broken and the type can't be string\n// TODO for more info: https://github.com/near/near-sdk-js/issues/78\nexport function bytesToU8Array(bytes) {\n    let ret = new Uint8Array(bytes.length);\n    for (let i = 0; i < bytes.length; i++) {\n        ret[i] = bytes.charCodeAt(i);\n    }\n    return ret;\n}\nexport function bytes(strOrU8Array) {\n    if (typeof strOrU8Array == \"string\") {\n        return checkStringIsBytes(strOrU8Array);\n    }\n    else if (strOrU8Array instanceof Uint8Array) {\n        return u8ArrayToBytes(strOrU8Array);\n    }\n    throw new Error(\"bytes: expected string or Uint8Array\");\n}\nfunction checkStringIsBytes(str) {\n    for (let i = 0; i < str.length; i++) {\n        if (str.charCodeAt(i) > 255) {\n            throw new Error(`string ${str} at index ${i}: ${str[i]} is not a valid byte`);\n        }\n    }\n    return str;\n}\nexport function assert(b, str) {\n    if (b) {\n        return;\n    }\n    else {\n        throw Error(\"assertion failed: \" + str);\n    }\n}\n","/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nexport function assertNumber(n) {\n    if (!Number.isSafeInteger(n))\n        throw new Error(`Wrong integer: ${n}`);\n}\nfunction chain(...args) {\n    const wrap = (a, b) => (c) => a(b(c));\n    const encode = Array.from(args)\n        .reverse()\n        .reduce((acc, i) => (acc ? wrap(acc, i.encode) : i.encode), undefined);\n    const decode = args.reduce((acc, i) => (acc ? wrap(acc, i.decode) : i.decode), undefined);\n    return { encode, decode };\n}\nfunction alphabet(alphabet) {\n    return {\n        encode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('alphabet.encode input should be an array of numbers');\n            return digits.map((i) => {\n                assertNumber(i);\n                if (i < 0 || i >= alphabet.length)\n                    throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);\n                return alphabet[i];\n            });\n        },\n        decode: (input) => {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('alphabet.decode input should be array of strings');\n            return input.map((letter) => {\n                if (typeof letter !== 'string')\n                    throw new Error(`alphabet.decode: not string element=${letter}`);\n                const index = alphabet.indexOf(letter);\n                if (index === -1)\n                    throw new Error(`Unknown letter: \"${letter}\". Allowed: ${alphabet}`);\n                return index;\n            });\n        },\n    };\n}\nfunction join(separator = '') {\n    if (typeof separator !== 'string')\n        throw new Error('join separator should be string');\n    return {\n        encode: (from) => {\n            if (!Array.isArray(from) || (from.length && typeof from[0] !== 'string'))\n                throw new Error('join.encode input should be array of strings');\n            for (let i of from)\n                if (typeof i !== 'string')\n                    throw new Error(`join.encode: non-string input=${i}`);\n            return from.join(separator);\n        },\n        decode: (to) => {\n            if (typeof to !== 'string')\n                throw new Error('join.decode input should be string');\n            return to.split(separator);\n        },\n    };\n}\nfunction padding(bits, chr = '=') {\n    assertNumber(bits);\n    if (typeof chr !== 'string')\n        throw new Error('padding chr should be string');\n    return {\n        encode(data) {\n            if (!Array.isArray(data) || (data.length && typeof data[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of data)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.encode: non-string input=${i}`);\n            while ((data.length * bits) % 8)\n                data.push(chr);\n            return data;\n        },\n        decode(input) {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of input)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.decode: non-string input=${i}`);\n            let end = input.length;\n            if ((end * bits) % 8)\n                throw new Error('Invalid padding: string should have whole number of bytes');\n            for (; end > 0 && input[end - 1] === chr; end--) {\n                if (!(((end - 1) * bits) % 8))\n                    throw new Error('Invalid padding: string has too much padding');\n            }\n            return input.slice(0, end);\n        },\n    };\n}\nfunction normalize(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('normalize fn should be function');\n    return { encode: (from) => from, decode: (to) => fn(to) };\n}\nfunction convertRadix(data, from, to) {\n    if (from < 2)\n        throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);\n    if (to < 2)\n        throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);\n    if (!Array.isArray(data))\n        throw new Error('convertRadix: data should be array');\n    if (!data.length)\n        return [];\n    let pos = 0;\n    const res = [];\n    const digits = Array.from(data);\n    digits.forEach((d) => {\n        assertNumber(d);\n        if (d < 0 || d >= from)\n            throw new Error(`Wrong integer: ${d}`);\n    });\n    while (true) {\n        let carry = 0;\n        let done = true;\n        for (let i = pos; i < digits.length; i++) {\n            const digit = digits[i];\n            const digitBase = from * carry + digit;\n            if (!Number.isSafeInteger(digitBase) ||\n                (from * carry) / from !== carry ||\n                digitBase - digit !== from * carry) {\n                throw new Error('convertRadix: carry overflow');\n            }\n            carry = digitBase % to;\n            digits[i] = Math.floor(digitBase / to);\n            if (!Number.isSafeInteger(digits[i]) || digits[i] * to + carry !== digitBase)\n                throw new Error('convertRadix: carry overflow');\n            if (!done)\n                continue;\n            else if (!digits[i])\n                pos = i;\n            else\n                done = false;\n        }\n        res.push(carry);\n        if (done)\n            break;\n    }\n    for (let i = 0; i < data.length - 1 && data[i] === 0; i++)\n        res.push(0);\n    return res.reverse();\n}\nconst gcd = (a, b) => (!b ? a : gcd(b, a % b));\nconst radix2carry = (from, to) => from + (to - gcd(from, to));\nfunction convertRadix2(data, from, to, padding) {\n    if (!Array.isArray(data))\n        throw new Error('convertRadix2: data should be array');\n    if (from <= 0 || from > 32)\n        throw new Error(`convertRadix2: wrong from=${from}`);\n    if (to <= 0 || to > 32)\n        throw new Error(`convertRadix2: wrong to=${to}`);\n    if (radix2carry(from, to) > 32) {\n        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);\n    }\n    let carry = 0;\n    let pos = 0;\n    const mask = 2 ** to - 1;\n    const res = [];\n    for (const n of data) {\n        assertNumber(n);\n        if (n >= 2 ** from)\n            throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\n        carry = (carry << from) | n;\n        if (pos + from > 32)\n            throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\n        pos += from;\n        for (; pos >= to; pos -= to)\n            res.push(((carry >> (pos - to)) & mask) >>> 0);\n        carry &= 2 ** pos - 1;\n    }\n    carry = (carry << (to - pos)) & mask;\n    if (!padding && pos >= from)\n        throw new Error('Excess padding');\n    if (!padding && carry)\n        throw new Error(`Non-zero padding: ${carry}`);\n    if (padding && pos > 0)\n        res.push(carry >>> 0);\n    return res;\n}\nfunction radix(num) {\n    assertNumber(num);\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix.encode input should be Uint8Array');\n            return convertRadix(Array.from(bytes), 2 ** 8, num);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix.decode input should be array of strings');\n            return Uint8Array.from(convertRadix(digits, num, 2 ** 8));\n        },\n    };\n}\nfunction radix2(bits, revPadding = false) {\n    assertNumber(bits);\n    if (bits <= 0 || bits > 32)\n        throw new Error('radix2: bits should be in (0..32]');\n    if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)\n        throw new Error('radix2: carry overflow');\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix2.encode input should be Uint8Array');\n            return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix2.decode input should be array of strings');\n            return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\n        },\n    };\n}\nfunction unsafeWrapper(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('unsafeWrapper fn should be function');\n    return function (...args) {\n        try {\n            return fn.apply(null, args);\n        }\n        catch (e) { }\n    };\n}\nfunction checksum(len, fn) {\n    assertNumber(len);\n    if (typeof fn !== 'function')\n        throw new Error('checksum fn should be function');\n    return {\n        encode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.encode: input should be Uint8Array');\n            const checksum = fn(data).slice(0, len);\n            const res = new Uint8Array(data.length + len);\n            res.set(data);\n            res.set(checksum, data.length);\n            return res;\n        },\n        decode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.decode: input should be Uint8Array');\n            const payload = data.slice(0, -len);\n            const newChecksum = fn(payload).slice(0, len);\n            const oldChecksum = data.slice(-len);\n            for (let i = 0; i < len; i++)\n                if (newChecksum[i] !== oldChecksum[i])\n                    throw new Error('Invalid checksum');\n            return payload;\n        },\n    };\n}\nexport const utils = { alphabet, chain, checksum, radix, radix2, join, padding };\nexport const base16 = chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\nexport const base32 = chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));\nexport const base32hex = chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));\nexport const base32crockford = chain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize((s) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));\nexport const base64 = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));\nexport const base64url = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));\nconst genBase58 = (abc) => chain(radix(58), alphabet(abc), join(''));\nexport const base58 = genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\nexport const base58flickr = genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');\nexport const base58xrp = genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\nexport const base58xmr = {\n    encode(data) {\n        let res = '';\n        for (let i = 0; i < data.length; i += 8) {\n            const block = data.subarray(i, i + 8);\n            res += base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');\n        }\n        return res;\n    },\n    decode(str) {\n        let res = [];\n        for (let i = 0; i < str.length; i += 11) {\n            const slice = str.slice(i, i + 11);\n            const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\n            const block = base58.decode(slice);\n            for (let j = 0; j < block.length - blockLen; j++) {\n                if (block[j] !== 0)\n                    throw new Error('base58xmr: wrong padding');\n            }\n            res = res.concat(Array.from(block.slice(block.length - blockLen)));\n        }\n        return Uint8Array.from(res);\n    },\n};\nexport const base58check = (sha256) => chain(checksum(4, (data) => sha256(sha256(data))), base58);\nconst BECH_ALPHABET = chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\nfunction bech32Polymod(pre) {\n    const b = pre >> 25;\n    let chk = (pre & 0x1ffffff) << 5;\n    for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\n        if (((b >> i) & 1) === 1)\n            chk ^= POLYMOD_GENERATORS[i];\n    }\n    return chk;\n}\nfunction bechChecksum(prefix, words, encodingConst = 1) {\n    const len = prefix.length;\n    let chk = 1;\n    for (let i = 0; i < len; i++) {\n        const c = prefix.charCodeAt(i);\n        if (c < 33 || c > 126)\n            throw new Error(`Invalid prefix (${prefix})`);\n        chk = bech32Polymod(chk) ^ (c >> 5);\n    }\n    chk = bech32Polymod(chk);\n    for (let i = 0; i < len; i++)\n        chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);\n    for (let v of words)\n        chk = bech32Polymod(chk) ^ v;\n    for (let i = 0; i < 6; i++)\n        chk = bech32Polymod(chk);\n    chk ^= encodingConst;\n    return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));\n}\nfunction genBech32(encoding) {\n    const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\n    const _words = radix2(5);\n    const fromWords = _words.decode;\n    const toWords = _words.encode;\n    const fromWordsUnsafe = unsafeWrapper(fromWords);\n    function encode(prefix, words, limit = 90) {\n        if (typeof prefix !== 'string')\n            throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);\n        if (!Array.isArray(words) || (words.length && typeof words[0] !== 'number'))\n            throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);\n        const actualLength = prefix.length + 7 + words.length;\n        if (limit !== false && actualLength > limit)\n            throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\n        prefix = prefix.toLowerCase();\n        return `${prefix}1${BECH_ALPHABET.encode(words)}${bechChecksum(prefix, words, ENCODING_CONST)}`;\n    }\n    function decode(str, limit = 90) {\n        if (typeof str !== 'string')\n            throw new Error(`bech32.decode input should be string, not ${typeof str}`);\n        if (str.length < 8 || (limit !== false && str.length > limit))\n            throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);\n        const lowered = str.toLowerCase();\n        if (str !== lowered && str !== str.toUpperCase())\n            throw new Error(`String must be lowercase or uppercase`);\n        str = lowered;\n        const sepIndex = str.lastIndexOf('1');\n        if (sepIndex === 0 || sepIndex === -1)\n            throw new Error(`Letter \"1\" must be present between prefix and data only`);\n        const prefix = str.slice(0, sepIndex);\n        const _words = str.slice(sepIndex + 1);\n        if (_words.length < 6)\n            throw new Error('Data must be at least 6 characters long');\n        const words = BECH_ALPHABET.decode(_words).slice(0, -6);\n        const sum = bechChecksum(prefix, words, ENCODING_CONST);\n        if (!_words.endsWith(sum))\n            throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\n        return { prefix, words };\n    }\n    const decodeUnsafe = unsafeWrapper(decode);\n    function decodeToBytes(str) {\n        const { prefix, words } = decode(str, false);\n        return { prefix, words, bytes: fromWords(words) };\n    }\n    return { encode, decode, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };\n}\nexport const bech32 = genBech32('bech32');\nexport const bech32m = genBech32('bech32m');\nexport const utf8 = {\n    encode: (data) => new TextDecoder().decode(data),\n    decode: (str) => new TextEncoder().encode(str),\n};\nexport const hex = chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize((s) => {\n    if (typeof s !== 'string' || s.length % 2)\n        throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);\n    return s.toLowerCase();\n}));\nconst CODERS = {\n    utf8, hex, base16, base32, base64, base64url, base58, base58xmr\n};\nconst coderTypeError = `Invalid encoding type. Available types: ${Object.keys(CODERS).join(', ')}`;\nexport const bytesToString = (type, bytes) => {\n    if (typeof type !== 'string' || !CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (!(bytes instanceof Uint8Array))\n        throw new TypeError('bytesToString() expects Uint8Array');\n    return CODERS[type].encode(bytes);\n};\nexport const str = bytesToString;\nexport const stringToBytes = (type, str) => {\n    if (!CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (typeof str !== 'string')\n        throw new TypeError('stringToBytes() expects string');\n    return CODERS[type].decode(str);\n};\nexport const bytes = stringToBytes;\n","import { bytes } from \"../utils\";\nimport { base58 } from '@scure/base';\nexport var CurveType;\n(function (CurveType) {\n    CurveType[CurveType[\"ED25519\"] = 0] = \"ED25519\";\n    CurveType[CurveType[\"SECP256K1\"] = 1] = \"SECP256K1\";\n})(CurveType || (CurveType = {}));\nfunction data_len(c) {\n    switch (c) {\n        case CurveType.ED25519:\n            return 32;\n        case CurveType.SECP256K1:\n            return 64;\n        default:\n            throw new UnknownCurve();\n    }\n}\nfunction split_key_type_data(value) {\n    let idx = value.indexOf(\":\");\n    if (idx >= 0) {\n        return [curveTypeFromStr(value.substring(0, idx)), value.substring(idx + 1)];\n    }\n    else {\n        return [CurveType.ED25519, value];\n    }\n}\nexport function curveTypeFromStr(value) {\n    switch (value) {\n        case \"ed25519\":\n            return CurveType.ED25519;\n        case \"secp256k1\":\n            return CurveType.SECP256K1;\n        default:\n            throw new UnknownCurve();\n    }\n}\nexport class ParsePublicKeyError extends Error {\n}\nexport class InvalidLengthError extends ParsePublicKeyError {\n    constructor(length) {\n        super(`Invalid length: ${length}`);\n        this.length = length;\n    }\n}\nexport class Base58Error extends ParsePublicKeyError {\n    constructor(error) {\n        super(`Base58 error: ${error}`);\n        this.error = error;\n    }\n}\nexport class UnknownCurve extends ParsePublicKeyError {\n    constructor() {\n        super(\"Unknown curve\");\n    }\n}\nexport class PublicKey {\n    constructor(data) {\n        this.data = data;\n        let curve_type = data.charCodeAt(0);\n        let curve_len = data_len(curve_type);\n        if (data.length != curve_len + 1) {\n            throw new InvalidLengthError(data.length);\n        }\n        this.data = data;\n    }\n    curveType() {\n        return this.data.charCodeAt(0);\n    }\n    static fromString(s) {\n        let [curve, key_data] = split_key_type_data(s);\n        let data;\n        try {\n            data = bytes(base58.decode(key_data));\n        }\n        catch (err) {\n            throw new Base58Error(err.message);\n        }\n        return new PublicKey(String.fromCharCode(curve) + data);\n    }\n}\n","import { PromiseResult } from \"./types\";\nconst U64_MAX = 2n ** 64n - 1n;\nconst EVICTED_REGISTER = U64_MAX - 1n;\nexport function log(...params) {\n    env.log(`${params\n        .map(x => x === undefined ? 'undefined' : x) // Stringify undefined\n        .map(x => typeof (x) === 'object' ? JSON.stringify(x) : x) // Convert Objects to strings\n        .join(' ')}` // Convert to string\n    );\n}\nexport function signerAccountId() {\n    env.signer_account_id(0);\n    return env.read_register(0);\n}\nexport function signerAccountPk() {\n    env.signer_account_pk(0);\n    return env.read_register(0);\n}\nexport function predecessorAccountId() {\n    env.predecessor_account_id(0);\n    return env.read_register(0);\n}\nexport function blockIndex() {\n    return env.block_index();\n}\nexport function blockHeight() {\n    return blockIndex();\n}\nexport function blockTimestamp() {\n    return env.block_timestamp();\n}\nexport function epochHeight() {\n    return env.epoch_height();\n}\nexport function attachedDeposit() {\n    return env.attached_deposit();\n}\nexport function prepaidGas() {\n    return env.prepaid_gas();\n}\nexport function usedGas() {\n    return env.used_gas();\n}\nexport function randomSeed() {\n    env.random_seed(0);\n    return env.read_register(0);\n}\nexport function sha256(value) {\n    env.sha256(value, 0);\n    return env.read_register(0);\n}\nexport function keccak256(value) {\n    env.keccak256(value, 0);\n    return env.read_register(0);\n}\nexport function keccak512(value) {\n    env.keccak512(value, 0);\n    return env.read_register(0);\n}\nexport function ripemd160(value) {\n    env.ripemd160(value, 0);\n    return env.read_register(0);\n}\nexport function ecrecover(hash, sig, v, malleabilityFlag) {\n    let ret = env.ecrecover(hash, sig, v, malleabilityFlag, 0);\n    if (ret === 0n) {\n        return null;\n    }\n    return env.read_register(0);\n}\n// NOTE: \"env.panic(msg)\" is not exported, use \"throw Error(msg)\" instead\nexport function panicUtf8(msg) {\n    env.panic_utf8(msg);\n}\nexport function logUtf8(msg) {\n    env.log_utf8(msg);\n}\nexport function logUtf16(msg) {\n    env.log_utf16(msg);\n}\nexport function storageRead(key) {\n    let ret = env.storage_read(key, 0);\n    if (ret === 1n) {\n        return env.read_register(0);\n    }\n    else {\n        return null;\n    }\n}\nexport function storageHasKey(key) {\n    let ret = env.storage_has_key(key);\n    if (ret === 1n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nexport function validatorStake(accountId) {\n    return env.validator_stake(accountId);\n}\nexport function validatorTotalStake() {\n    return env.validator_total_stake();\n}\nexport function altBn128G1Multiexp(value) {\n    env.alt_bn128_g1_multiexp(value, 0);\n    return env.read_register(0);\n}\nexport function altBn128G1Sum(value) {\n    env.alt_bn128_g1_sum(value, 0);\n    return env.read_register(0);\n}\nexport function altBn128PairingCheck(value) {\n    let ret = env.alt_bn128_pairing_check(value);\n    if (ret === 1n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nexport function storageGetEvicted() {\n    return env.read_register(EVICTED_REGISTER);\n}\nexport function currentAccountId() {\n    env.current_account_id(0);\n    return env.read_register(0);\n}\nexport function input() {\n    env.input(0);\n    return env.read_register(0);\n}\nexport function storageUsage() {\n    return env.storage_usage();\n}\nexport function accountBalance() {\n    return env.account_balance();\n}\nexport function accountLockedBalance() {\n    return env.account_locked_balance();\n}\nexport function valueReturn(value) {\n    env.value_return(value);\n}\nexport function promiseCreate(accountId, methodName, args, amount, gas) {\n    return env.promise_create(accountId, methodName, args, amount, gas);\n}\nexport function promiseThen(promiseIndex, accountId, methodName, args, amount, gas) {\n    return env.promise_then(promiseIndex, accountId, methodName, args, amount, gas);\n}\nexport function promiseAnd(...promiseIndex) {\n    return env.promise_and(...promiseIndex);\n}\nexport function promiseBatchCreate(accountId) {\n    return env.promise_batch_create(accountId);\n}\nexport function promiseBatchThen(promiseIndex, accountId) {\n    return env.promise_batch_then(promiseIndex, accountId);\n}\nexport function promiseBatchActionCreateAccount(promiseIndex) {\n    env.promise_batch_action_create_account(promiseIndex);\n}\nexport function promiseBatchActionDeployContract(promiseIndex, code) {\n    env.promise_batch_action_deploy_contract(promiseIndex, code);\n}\nexport function promiseBatchActionFunctionCall(promiseIndex, methodName, args, amount, gas) {\n    env.promise_batch_action_function_call(promiseIndex, methodName, args, amount, gas);\n}\nexport function promiseBatchActionTransfer(promiseIndex, amount) {\n    env.promise_batch_action_transfer(promiseIndex, amount);\n}\nexport function promiseBatchActionStake(promiseIndex, amount, publicKey) {\n    env.promise_batch_action_stake(promiseIndex, amount, publicKey);\n}\nexport function promiseBatchActionAddKeyWithFullAccess(promiseIndex, publicKey, nonce) {\n    env.promise_batch_action_add_key_with_full_access(promiseIndex, publicKey, nonce);\n}\nexport function promiseBatchActionAddKeyWithFunctionCall(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames) {\n    env.promise_batch_action_add_key_with_function_call(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames);\n}\nexport function promiseBatchActionDeleteKey(promiseIndex, publicKey) {\n    env.promise_batch_action_delete_key(promiseIndex, publicKey);\n}\nexport function promiseBatchActionDeleteAccount(promiseIndex, beneficiaryId) {\n    env.promise_batch_action_delete_account(promiseIndex, beneficiaryId);\n}\nexport function promiseBatchActionFunctionCallWeight(promiseIndex, methodName, args, amount, gas, weight) {\n    env.promise_batch_action_function_call_weight(promiseIndex, methodName, args, amount, gas, weight);\n}\nexport function promiseResultsCount() {\n    return env.promise_results_count();\n}\nexport function promiseResult(resultIdx) {\n    let status = env.promise_result(resultIdx, 0);\n    if (status == PromiseResult.Successful) {\n        return env.read_register(0);\n    }\n    else {\n        throw Error(`Promise result ${status == PromiseResult.Failed ? \"Failed\" :\n            status == PromiseResult.NotReady ? \"NotReady\" : status}`);\n    }\n}\nexport function promiseReturn(promiseIdx) {\n    env.promise_return(promiseIdx);\n}\nexport function storageWrite(key, value) {\n    let exist = env.storage_write(key, value, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function storageRemove(key) {\n    let exist = env.storage_remove(key, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function storageByteCost() {\n    return 10000000000000000000n;\n}\n","import * as near from \"./api\";\nexport function initialize({}) {\n    return function (target, key, descriptor) {\n    };\n}\nexport function call({ privateFunction = false, payableFunction = false }) {\n    return function (target, key, descriptor) {\n        const originalMethod = descriptor.value;\n        descriptor.value = function (...args) {\n            if (privateFunction && near.predecessorAccountId() !== near.currentAccountId()) {\n                throw Error(\"Function is private\");\n            }\n            if (!payableFunction && near.attachedDeposit() > BigInt(0)) {\n                throw Error(\"Function is not payable\");\n            }\n            return originalMethod.apply(this, args);\n        };\n    };\n}\nexport function view({}) {\n    return function (target, key, descriptor) {\n    };\n}\nexport function NearBindgen({ requireInit = false }) {\n    return (target) => {\n        return class extends target {\n            static _create() {\n                return new target();\n            }\n            static _getState() {\n                const rawState = near.storageRead(\"STATE\");\n                return rawState ? this._deserialize(rawState) : null;\n            }\n            static _saveToStorage(obj) {\n                near.storageWrite(\"STATE\", this._serialize(obj));\n            }\n            static _getArgs() {\n                return JSON.parse(near.input() || \"{}\");\n            }\n            static _serialize(value) {\n                return JSON.stringify(value);\n            }\n            static _deserialize(value) {\n                return JSON.parse(value);\n            }\n            static _reconstruct(classObject, plainObject) {\n                for (const item in classObject) {\n                    if (classObject[item].constructor?.deserialize !== undefined) {\n                        classObject[item] = classObject[item].constructor.deserialize(plainObject[item]);\n                    }\n                    else {\n                        classObject[item] = plainObject[item];\n                    }\n                }\n                return classObject;\n            }\n            static _requireInit() {\n                return requireInit;\n            }\n        };\n    };\n}\n","import * as near from '../api';\nexport class LookupMap {\n    constructor(keyPrefix) {\n        this.keyPrefix = keyPrefix;\n    }\n    containsKey(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        return near.storageHasKey(storageKey);\n    }\n    get(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        let raw = near.storageRead(storageKey);\n        if (raw !== null) {\n            return JSON.parse(raw);\n        }\n        return null;\n    }\n    remove(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        if (near.storageRemove(storageKey)) {\n            return JSON.parse(near.storageGetEvicted());\n        }\n        return null;\n    }\n    set(key, value) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        let storageValue = JSON.stringify(value);\n        if (near.storageWrite(storageKey, storageValue)) {\n            return JSON.parse(near.storageGetEvicted());\n        }\n        return null;\n    }\n    extend(objects) {\n        for (let kv of objects) {\n            this.set(kv[0], kv[1]);\n        }\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        return new LookupMap(data.keyPrefix);\n    }\n}\n","import * as near from \"../api\";\nimport { u8ArrayToBytes } from \"../utils\";\nconst ERR_INDEX_OUT_OF_BOUNDS = \"Index out of bounds\";\nconst ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nfunction indexToKey(prefix, index) {\n    let data = new Uint32Array([index]);\n    let array = new Uint8Array(data.buffer);\n    let key = u8ArrayToBytes(array);\n    return prefix + key;\n}\n/// An iterable implementation of vector that stores its content on the trie.\n/// Uses the following map: index -> element\nexport class Vector {\n    constructor(prefix) {\n        this.length = 0;\n        this.prefix = prefix;\n    }\n    isEmpty() {\n        return this.length == 0;\n    }\n    get(index) {\n        if (index >= this.length) {\n            return null;\n        }\n        let storageKey = indexToKey(this.prefix, index);\n        return JSON.parse(near.storageRead(storageKey));\n    }\n    /// Removes an element from the vector and returns it in serialized form.\n    /// The removed element is replaced by the last element of the vector.\n    /// Does not preserve ordering, but is `O(1)`.\n    swapRemove(index) {\n        if (index >= this.length) {\n            throw new Error(ERR_INDEX_OUT_OF_BOUNDS);\n        }\n        else if (index + 1 == this.length) {\n            return this.pop();\n        }\n        else {\n            let key = indexToKey(this.prefix, index);\n            let last = this.pop();\n            if (near.storageWrite(key, JSON.stringify(last))) {\n                return JSON.parse(near.storageGetEvicted());\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n    }\n    push(element) {\n        let key = indexToKey(this.prefix, this.length);\n        this.length += 1;\n        near.storageWrite(key, JSON.stringify(element));\n    }\n    pop() {\n        if (this.isEmpty()) {\n            return null;\n        }\n        else {\n            let lastIndex = this.length - 1;\n            let lastKey = indexToKey(this.prefix, lastIndex);\n            this.length -= 1;\n            if (near.storageRemove(lastKey)) {\n                return JSON.parse(near.storageGetEvicted());\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n    }\n    replace(index, element) {\n        if (index >= this.length) {\n            throw new Error(ERR_INDEX_OUT_OF_BOUNDS);\n        }\n        else {\n            let key = indexToKey(this.prefix, index);\n            if (near.storageWrite(key, JSON.stringify(element))) {\n                return JSON.parse(near.storageGetEvicted());\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n    }\n    extend(elements) {\n        for (let element of elements) {\n            this.push(element);\n        }\n    }\n    [Symbol.iterator]() {\n        return new VectorIterator(this);\n    }\n    clear() {\n        for (let i = 0; i < this.length; i++) {\n            let key = indexToKey(this.prefix, i);\n            near.storageRemove(key);\n        }\n        this.length = 0;\n    }\n    toArray() {\n        let ret = [];\n        for (let v of this) {\n            ret.push(v);\n        }\n        return ret;\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        let vector = new Vector(data.prefix);\n        vector.length = data.length;\n        return vector;\n    }\n}\nexport class VectorIterator {\n    constructor(vector) {\n        this.current = 0;\n        this.vector = vector;\n    }\n    next() {\n        if (this.current < this.vector.length) {\n            let value = this.vector.get(this.current);\n            this.current += 1;\n            return { value, done: false };\n        }\n        return { value: null, done: true };\n    }\n}\n","import * as near from '../api';\nexport class LookupSet {\n    constructor(keyPrefix) {\n        this.keyPrefix = keyPrefix;\n    }\n    contains(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        return near.storageHasKey(storageKey);\n    }\n    // Returns true if the element was present in the set.\n    remove(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        return near.storageRemove(storageKey);\n    }\n    // If the set did not have this value present, `true` is returned.\n    // If the set did have this value present, `false` is returned.\n    set(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        return !near.storageWrite(storageKey, '');\n    }\n    extend(keys) {\n        for (let key of keys) {\n            this.set(key);\n        }\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        return new LookupSet(data.keyPrefix);\n    }\n}\n","import { Vector, VectorIterator } from \"./vector\";\nimport { LookupMap } from \"./lookup-map\";\nconst ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nexport class UnorderedMap {\n    constructor(prefix) {\n        this.prefix = prefix;\n        this.keys = new Vector(prefix + 'u'); // intentional different prefix with old UnorderedMap\n        this.values = new LookupMap(prefix + 'm');\n    }\n    get length() {\n        let keysLen = this.keys.length;\n        return keysLen;\n    }\n    isEmpty() {\n        let keysIsEmpty = this.keys.isEmpty();\n        return keysIsEmpty;\n    }\n    get(key) {\n        let valueAndIndex = this.values.get(key);\n        if (valueAndIndex === null) {\n            return null;\n        }\n        let value = valueAndIndex[0];\n        return value;\n    }\n    set(key, value) {\n        let valueAndIndex = this.values.get(key);\n        if (valueAndIndex !== null) {\n            let oldValue = valueAndIndex[0];\n            valueAndIndex[0] = value;\n            this.values.set(key, valueAndIndex);\n            return oldValue;\n        }\n        let nextIndex = this.length;\n        this.keys.push(key);\n        this.values.set(key, [value, nextIndex]);\n        return null;\n    }\n    remove(key) {\n        let oldValueAndIndex = this.values.remove(key);\n        if (oldValueAndIndex === null) {\n            return null;\n        }\n        let index = oldValueAndIndex[1];\n        if (this.keys.swapRemove(index) === null) {\n            throw new Error(ERR_INCONSISTENT_STATE);\n        }\n        // the last key is swapped to key[index], the corresponding [value, index] need update\n        if (this.keys.length > 0 && index != this.keys.length) {\n            // if there is still elements and it was not the last element\n            let swappedKey = this.keys.get(index);\n            let swappedValueAndIndex = this.values.get(swappedKey);\n            if (swappedValueAndIndex === null) {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n            this.values.set(swappedKey, [swappedValueAndIndex[0], index]);\n        }\n        return oldValueAndIndex[0];\n    }\n    clear() {\n        for (let key of this.keys) {\n            // Set instead of remove to avoid loading the value from storage.\n            this.values.set(key, null);\n        }\n        this.keys.clear();\n    }\n    toArray() {\n        let ret = [];\n        for (let v of this) {\n            ret.push(v);\n        }\n        return ret;\n    }\n    [Symbol.iterator]() {\n        return new UnorderedMapIterator(this);\n    }\n    extend(kvs) {\n        for (let [k, v] of kvs) {\n            this.set(k, v);\n        }\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        let map = new UnorderedMap(data.prefix);\n        // reconstruct keys Vector\n        map.keys = new Vector(data.prefix + \"u\");\n        map.keys.length = data.keys.length;\n        // reconstruct values LookupMap\n        map.values = new LookupMap(data.prefix + \"m\");\n        return map;\n    }\n}\nclass UnorderedMapIterator {\n    constructor(unorderedMap) {\n        this.keys = new VectorIterator(unorderedMap.keys);\n        this.map = unorderedMap.values;\n    }\n    next() {\n        let key = this.keys.next();\n        let value;\n        if (!key.done) {\n            value = this.map.get(key.value);\n            if (value === null) {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n        return { value: [key.value, value ? value[0] : value], done: key.done };\n    }\n}\n","import * as near from \"../api\";\nimport { u8ArrayToBytes, bytesToU8Array } from \"../utils\";\nimport { Vector } from \"./vector\";\nconst ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nfunction serializeIndex(index) {\n    let data = new Uint32Array([index]);\n    let array = new Uint8Array(data.buffer);\n    return u8ArrayToBytes(array);\n}\nfunction deserializeIndex(rawIndex) {\n    let array = bytesToU8Array(rawIndex);\n    let data = new Uint32Array(array.buffer);\n    return data[0];\n}\nexport class UnorderedSet {\n    constructor(prefix) {\n        this.prefix = prefix;\n        this.elementIndexPrefix = prefix + \"i\";\n        let elementsPrefix = prefix + \"e\";\n        this.elements = new Vector(elementsPrefix);\n    }\n    get length() {\n        return this.elements.length;\n    }\n    isEmpty() {\n        return this.elements.isEmpty();\n    }\n    contains(element) {\n        let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n        return near.storageHasKey(indexLookup);\n    }\n    set(element) {\n        let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n        if (near.storageRead(indexLookup)) {\n            return false;\n        }\n        else {\n            let nextIndex = this.length;\n            let nextIndexRaw = serializeIndex(nextIndex);\n            near.storageWrite(indexLookup, nextIndexRaw);\n            this.elements.push(element);\n            return true;\n        }\n    }\n    remove(element) {\n        let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n        let indexRaw = near.storageRead(indexLookup);\n        if (indexRaw) {\n            if (this.length == 1) {\n                // If there is only one element then swap remove simply removes it without\n                // swapping with the last element.\n                near.storageRemove(indexLookup);\n            }\n            else {\n                // If there is more than one element then swap remove swaps it with the last\n                // element.\n                let lastElement = this.elements.get(this.length - 1);\n                if (!lastElement) {\n                    throw new Error(ERR_INCONSISTENT_STATE);\n                }\n                near.storageRemove(indexLookup);\n                // If the removed element was the last element from keys, then we don't need to\n                // reinsert the lookup back.\n                if (lastElement != element) {\n                    let lastLookupElement = this.elementIndexPrefix + JSON.stringify(lastElement);\n                    near.storageWrite(lastLookupElement, indexRaw);\n                }\n            }\n            let index = deserializeIndex(indexRaw);\n            this.elements.swapRemove(index);\n            return true;\n        }\n        return false;\n    }\n    clear() {\n        for (let element of this.elements) {\n            let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n            near.storageRemove(indexLookup);\n        }\n        this.elements.clear();\n    }\n    toArray() {\n        let ret = [];\n        for (let v of this) {\n            ret.push(v);\n        }\n        return ret;\n    }\n    [Symbol.iterator]() {\n        return this.elements[Symbol.iterator]();\n    }\n    extend(elements) {\n        for (let element of elements) {\n            this.set(element);\n        }\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        let set = new UnorderedSet(data.prefix);\n        // reconstruct Vector\n        let elementsPrefix = data.prefix + \"e\";\n        set.elements = new Vector(elementsPrefix);\n        set.elements.length = data.elements.length;\n        return set;\n    }\n}\n","import { Contract } from \"./contract\";\n\n//defines the payout type we'll be returning as a part of the royalty standards.\nexport class Payout {\n    payout: { [accountId: string]: bigint };\n    constructor({ payout }: { payout: { [accountId: string]: bigint } }) {\n        this.payout = payout;\n    }\n}\n\nexport class NFTContractMetadata {\n    spec: string;\n    name: string;\n    symbol: string;\n    icon?: string;\n    base_uri?: string;\n    reference?: string;\n    reference_hash?: string;\n    \n    constructor(\n        {\n            spec, \n            name, \n            symbol, \n            icon, \n            baseUri, \n            reference, \n            referenceHash\n        }:{ \n            spec: string, \n            name: string, \n            symbol: string, \n            icon?: string, \n            baseUri?: string, \n            reference?: string, \n            referenceHash?: string\n        }) {\n        this.spec = spec  // required, essentially a version like \"nft-1.0.0\"\n        this.name = name  // required, ex. \"Mosaics\"\n        this.symbol = symbol // required, ex. \"MOSAIC\"\n        this.icon = icon // Data URL\n        this.base_uri = baseUri // Centralized gateway known to have reliable access to decentralized storage assets referenced by `reference` or `media` URLs\n        this.reference = reference // URL to a JSON file with more info\n        this.reference_hash = referenceHash // Base64-encoded sha256 hash of JSON from reference field. Required if `reference` is included.\n    }\n}\n\nexport class TokenMetadata {\n    title?: string;\n    description?: string;\n    media?: string;\n    media_hash?: string;\n    copies?: number;\n    issued_at?: string;\n    expires_at?: string;\n    starts_at?: string;\n    updated_at?: string;\n    extra?: string;\n    reference?: string;\n    reference_hash?: string;\n\n    constructor(\n        {\n            title, \n            description, \n            media, \n            mediaHash, \n            copies, \n            issuedAt, \n            expiresAt, \n            startsAt, \n            updatedAt, \n            extra, \n            reference, \n            referenceHash\n        }:{\n            title?: string, \n            description?: string, \n            media?: string, \n            mediaHash?: string, \n            copies?: number, \n            issuedAt?: string, \n            expiresAt?: string, \n            startsAt?: string, \n            updatedAt?: string, \n            extra?: string, \n            reference?: string, \n            referenceHash?: string}\n        ) {\n        this.title = title // ex. \"Arch Nemesis: Mail Carrier\" or \"Parcel #5055\"\n        this.description = description // free-form description\n        this.media = media // URL to associated media, preferably to decentralized, content-addressed storage\n        this.media_hash = mediaHash // Base64-encoded sha256 hash of content referenced by the `media` field. Required if `media` is included.\n        this.copies = copies // number of copies of this set of metadata in existence when token was minted.\n        this.issued_at = issuedAt // ISO 8601 datetime when token was issued or minted\n        this.expires_at = expiresAt // ISO 8601 datetime when token expires\n        this.starts_at = startsAt // ISO 8601 datetime when token starts being valid\n        this.updated_at = updatedAt // ISO 8601 datetime when token was last updated\n        this.extra = extra // anything extra the NFT wants to store on-chain. Can be stringified JSON.\n        this.reference = reference // URL to an off-chain JSON file with more info.\n        this.reference_hash = referenceHash // Base64-encoded sha256 hash of JSON from reference field. Required if `reference` is included.\n    }\n}\n\nexport class Token {\n    owner_id: string;\n    approved_account_ids: { [accountId: string]: number };\n    next_approval_id: number;\n    royalty: { [accountId: string]: number };\n\n    constructor({ \n        ownerId, \n        approvedAccountIds, \n        nextApprovalId, \n        royalty \n    }:{ \n        ownerId: string, \n        approvedAccountIds: { [accountId: string]: number }, \n        nextApprovalId: number, \n        royalty: { [accountId: string]: number } \n    }) {\n        //owner of the token\n        this.owner_id = ownerId,\n        //list of approved account IDs that have access to transfer the token. This maps an account ID to an approval ID\n        this.approved_account_ids = approvedAccountIds,\n        //the next approval ID to give out. \n        this.next_approval_id = nextApprovalId,\n        //keep track of the royalty percentages for the token in a hash map\n        this.royalty = royalty\n    }\n}\n\n//The Json token is what will be returned from view calls. \nexport class JsonToken {\n    token_id: string;\n    owner_id: string;\n    metadata: TokenMetadata;\n    approved_account_ids: { [accountId: string]: number };\n    royalty: { [accountId: string]: number };\n\n    constructor({ \n        tokenId, \n        ownerId, \n        metadata, \n        approvedAccountIds, \n        royalty \n    }:{\n        tokenId: string,\n        ownerId: string,\n        metadata: TokenMetadata,\n        approvedAccountIds: { [accountId: string]: number },\n        royalty: { [accountId: string]: number }\n    }) {\n        //token ID\n        this.token_id = tokenId,\n        //owner of the token\n        this.owner_id = ownerId,\n        //token metadata\n        this.metadata = metadata,\n        //list of approved account IDs that have access to transfer the token. This maps an account ID to an approval ID\n        this.approved_account_ids = approvedAccountIds,\n        //keep track of the royalty percentages for the token in a hash map\n        this.royalty = royalty\n    }\n}\n\n//get the information for a specific token ID\nexport function internalNftMetadata({\n    contract\n}:{\n    contract: Contract\n}): NFTContractMetadata {\n    return contract.metadata;\n}","import { assert, near, UnorderedSet, Vector } from \"near-sdk-js\";\nimport { Contract, NFT_METADATA_SPEC, NFT_STANDARD_NAME } from \"./contract\";\nimport { Token } from \"./metadata\";\n\n// Gets a collection and deserializes it into a set that can be used.\nexport function restoreOwners(collection) {\n    if (collection == null) {\n        return null;\n    }\n    return UnorderedSet.deserialize(collection as UnorderedSet);\n}\n\n//convert the royalty percentage and amount to pay into a payout (U128)\nexport function royaltyToPayout(royaltyPercentage: number, amountToPay: bigint): string {\n    return (BigInt(royaltyPercentage) * BigInt(amountToPay) / BigInt(10000)).toString();\n}\n\n//refund the storage taken up by passed in approved account IDs and send the funds to the passed in account ID. \nexport function refundApprovedAccountIdsIter(accountId: string, approvedAccountIds: string[]) {\n    //get the storage total by going through and summing all the bytes for each approved account IDs\n    let storageReleased = approvedAccountIds.map(e => bytesForApprovedAccountId(e)).reduce((partialSum, a) => partialSum + a, 0);\n    let amountToTransfer = BigInt(storageReleased) * near.storageByteCost().valueOf();\n    \n    // Send the money to the beneficiary (TODO: don't use batch actions)\n    const promise = near.promiseBatchCreate(accountId);\n    near.promiseBatchActionTransfer(promise, amountToTransfer)\n}\n\n//refund a map of approved account IDs and send the funds to the passed in account ID\nexport function refundApprovedAccountIds(accountId: string, approvedAccountIds: { [key: string]: number }) {\n    //call the refundApprovedAccountIdsIter with the approved account IDs as keys\n    refundApprovedAccountIdsIter(accountId, Object.keys(approvedAccountIds));\n}\n\n//refund the initial deposit based on the amount of storage that was used up\nexport function refundDeposit(storageUsed: bigint) {\n    //get how much it would cost to store the information\n    let requiredCost = storageUsed * near.storageByteCost().valueOf()\n    //get the attached deposit\n    let attachedDeposit = near.attachedDeposit().valueOf();\n\n    //make sure that the attached deposit is greater than or equal to the required cost\n    assert(\n        requiredCost <= attachedDeposit,\n        `Must attach ${requiredCost} yoctoNEAR to cover storage`\n    )\n\n    //get the refund amount from the attached deposit - required cost\n    let refund = attachedDeposit - requiredCost;\n    near.log(`Refunding ${refund} yoctoNEAR`);\n\n    //if the refund is greater than 1 yocto NEAR, we refund the predecessor that amount\n    if (refund > 1) {\n        // Send the money to the beneficiary (TODO: don't use batch actions)\n        const promise = near.promiseBatchCreate(near.predecessorAccountId());\n        near.promiseBatchActionTransfer(promise, refund)\n    }\n}\n\n//calculate how many bytes the account ID is taking up\nexport function bytesForApprovedAccountId(accountId: string): number {\n    // The extra 4 bytes are coming from Borsh serialization to store the length of the string.\n    return accountId.length + 4 + 8;\n}\n\n//Assert that the user has attached at least 1 yoctoNEAR (for security reasons and to pay for storage)\nexport function assertAtLeastOneYocto() {\n    assert(near.attachedDeposit().valueOf() >= BigInt(1), \"Requires attached deposit of at least 1 yoctoNEAR\");\n}\n\n//used to make sure the user attached exactly 1 yoctoNEAR\nexport function assertOneYocto() {\n    assert(near.attachedDeposit().toString() === \"1\", \"Requires attached deposit of exactly 1 yoctoNEAR\");\n}\n\n//add a token to the set of tokens an owner has\nexport function internalAddTokenToOwner(contract: Contract, accountId: string, tokenId: string) {\n    //get the set of tokens for the given account\n    let tokenSet = restoreOwners(contract.tokensPerOwner.get(accountId));\n\n    if(tokenSet == null) {\n        //if the account doesn't have any tokens, we create a new unordered set\n        tokenSet = new UnorderedSet(\"tokensPerOwner\" + accountId.toString());\n    }\n\n    //we insert the token ID into the set\n    tokenSet.set(tokenId);\n\n    //we insert that set for the given account ID. \n    contract.tokensPerOwner.set(accountId, tokenSet);\n}\n\n//remove a token from an owner (internal method and can't be called directly via CLI).\nexport function internalRemoveTokenFromOwner(contract: Contract, accountId: string, tokenId: string) {\n    //we get the set of tokens that the owner has\n    let tokenSet = restoreOwners(contract.tokensPerOwner.get(accountId));\n    //if there is no set of tokens for the owner, we panic with the following message:\n    if (tokenSet == null) {\n        near.panicUtf8(\"Token should be owned by the sender\");\n    }\n\n    //we remove the the token_id from the set of tokens\n    tokenSet.remove(tokenId)\n\n    //if the token set is now empty, we remove the owner from the tokens_per_owner collection\n    if (tokenSet.isEmpty()) {\n        contract.tokensPerOwner.remove(accountId);\n    } else { //if the token set is not empty, we simply insert it back for the account ID. \n        contract.tokensPerOwner.set(accountId, tokenSet);\n    }\n}\n\n//transfers the NFT to the receiver_id (internal method and can't be called directly via CLI).\nexport function internalTransfer(contract: Contract, senderId: string, receiverId: string, tokenId: string, approvalId: number, memo: string): Token {\n    //get the token object by passing in the token_id\n    let token = contract.tokensById.get(tokenId) as Token;\n    if (token == null) {\n        near.panicUtf8(\"no token found\");\n    }\n\n    //if the sender doesn't equal the owner, we check if the sender is in the approval list\n    if (senderId != token.owner_id) {\n        //if the token's approved account IDs doesn't contain the sender, we panic\n        if (!token.approved_account_ids.hasOwnProperty(senderId)) {\n            near.panicUtf8(\"Unauthorized\");\n        }\n\n        // If they included an approval_id, check if the sender's actual approval_id is the same as the one included\n        if (approvalId != null) {\n            //get the actual approval ID\n            let actualApprovalId = token.approved_account_ids[senderId];\n            //if the sender isn't in the map, we panic\n            if (actualApprovalId == null) {\n                near.panicUtf8(\"Sender is not approved account\");\n            }\n\n            //make sure that the actual approval ID is the same as the one provided\n            assert(actualApprovalId == approvalId, `The actual approval_id ${actualApprovalId} is different from the given approval_id ${approvalId}`);\n        }\n    }\n\n    //we make sure that the sender isn't sending the token to themselves\n    assert(token.owner_id != receiverId, \"The token owner and the receiver should be different\")\n\n    //we remove the token from it's current owner's set\n    internalRemoveTokenFromOwner(contract, token.owner_id, tokenId);\n    //we then add the token to the receiver_id's set\n    internalAddTokenToOwner(contract, receiverId, tokenId);\n\n    //we create a new token struct \n    let newToken = new Token ({\n        ownerId: receiverId,\n        //reset the approval account IDs\n        approvedAccountIds: {},\n        nextApprovalId: token.next_approval_id,\n        //we copy over the royalties from the previous token\n        royalty: token.royalty,\n    });\n\n    //insert that new token into the tokens_by_id, replacing the old entry \n    contract.tokensById.set(tokenId, newToken);\n\n    //if there was some memo attached, we log it. \n    if (memo != null) {\n        near.log(`Memo: ${memo}`);\n    }\n\n    // Default the authorized ID to be None for the logs.\n    let authorizedId;\n\n    //if the approval ID was provided, set the authorized ID equal to the sender\n    if (approvalId != null) {\n        authorizedId = senderId\n    }\n\n    // Construct the transfer log as per the events standard.\n    let nftTransferLog = {\n        // Standard name (\"nep171\").\n        standard: NFT_STANDARD_NAME,\n        // Version of the standard (\"nft-1.0.0\").\n        version: NFT_METADATA_SPEC,\n        // The data related with the event stored in a vector.\n        event: \"nft_transfer\",\n        data: [\n            {\n                // The optional authorized account ID to transfer the token on behalf of the old owner.\n                authorized_id: authorizedId,\n                // The old owner's account ID.\n                old_owner_id: token.owner_id,\n                // The account ID of the new owner of the token.\n                new_owner_id: receiverId,\n                // A vector containing the token IDs as strings.\n                token_ids: [tokenId],\n                // An optional memo to include.\n                memo,\n            }\n        ]\n    }\n\n    // Log the serialized json.\n    near.log(JSON.stringify(nftTransferLog));\n\n    //return the previous token object that was transferred.\n    return token\n}","// @ts-nocheck\nimport { assert, near } from \"near-sdk-js\";\nimport { Contract, NFT_METADATA_SPEC, NFT_STANDARD_NAME } from \"./contract\";\nimport { internalAddTokenToOwner, refundDeposit } from \"./internal\";\nimport { Token, TokenMetadata } from \"./metadata\";\n\nexport function internalMint({\n    contract,\n    tokenId,\n    metadata,\n    receiverId,\n    perpetualRoyalties\n}:{ \n    contract: Contract, \n    tokenId: string, \n    metadata: TokenMetadata, \n    receiverId: string \n    perpetualRoyalties: {[key: string]: number}\n}): void {\n    //measure the initial storage being used on the contract TODO\n    let initialStorageUsage = near.storageUsage();\n\n    // create a royalty map to store in the token\n    let royalty: { [accountId: string]: number } = {}\n\n    // if perpetual royalties were passed into the function: TODO: add isUndefined fn\n    if (perpetualRoyalties != null) {\n        //make sure that the length of the perpetual royalties is below 7 since we won't have enough GAS to pay out that many people\n        assert(Object.keys(perpetualRoyalties).length < 7, \"Cannot add more than 6 perpetual royalty amounts\");\n        \n        //iterate through the perpetual royalties and insert the account and amount in the royalty map\n        Object.entries(perpetualRoyalties).forEach(([account, amount], index) => {\n            royalty[account] = amount;\n        });\n    }\n\n    //specify the token struct that contains the owner ID \n    let token = new Token ({\n        //set the owner ID equal to the receiver ID passed into the function\n        ownerId: receiverId,\n        //we set the approved account IDs to the default value (an empty map)\n        approvedAccountIds: {},\n        //the next approval ID is set to 0\n        nextApprovalId: 0,\n        //the map of perpetual royalties for the token (The owner will get 100% - total perpetual royalties)\n        royalty,\n    });\n\n    //insert the token ID and token struct and make sure that the token doesn't exist\n    assert(!contract.tokensById.containsKey(tokenId), \"Token already exists\");\n    contract.tokensById.set(tokenId, token)\n\n    //insert the token ID and metadata\n    contract.tokenMetadataById.set(tokenId, metadata);\n\n    //call the internal method for adding the token to the owner\n    internalAddTokenToOwner(contract, token.owner_id, tokenId)\n\n    // Construct the mint log as per the events standard.\n    let nftMintLog = {\n        // Standard name (\"nep171\").\n        standard: NFT_STANDARD_NAME,\n        // Version of the standard (\"nft-1.0.0\").\n        version: NFT_METADATA_SPEC,\n        // The data related with the event stored in a vector.\n        event: \"nft_mint\",\n        data: [\n            {\n                // Owner of the token.\n                owner_id: token.owner_id,\n                // Vector of token IDs that were minted.\n                token_ids: [tokenId],\n            }\n        ]\n    }\n    \n    // Log the json.\n    near.log(`EVENT_JSON:${JSON.stringify(nftMintLog)}`);\n\n    //calculate the required storage which was the used - initial TODO\n    let requiredStorageInBytes = near.storageUsage().valueOf() - initialStorageUsage.valueOf();\n\n    //refund any excess storage if the user attached too much. Panic if they didn't attach enough to cover the required.\n    refundDeposit(requiredStorageInBytes);\n}","// @ts-nocheck\nimport { assert, bytes, near } from \"near-sdk-js\";\nimport { Contract, NFT_METADATA_SPEC, NFT_STANDARD_NAME } from \"./contract\";\nimport { assertOneYocto, internalAddTokenToOwner, internalRemoveTokenFromOwner, internalTransfer, refundDeposit, refundApprovedAccountIds } from \"./internal\";\nimport { JsonToken, Token, TokenMetadata } from \"./metadata\";\n\nconst GAS_FOR_RESOLVE_TRANSFER = 40_000_000_000_000;\nconst GAS_FOR_NFT_ON_TRANSFER = 35_000_000_000_000;\n\n//get the information for a specific token ID\nexport function internalNftToken({\n    contract,\n    tokenId\n}:{ \n    contract: Contract, \n    tokenId: string \n}) {\n    let token = contract.tokensById.get(tokenId) as Token;\n    //if there wasn't a token ID in the tokens_by_id collection, we return None\n    if (token == null) {\n        return null;\n    }\n\n    //if there is some token ID in the tokens_by_id collection\n    //we'll get the metadata for that token\n    let metadata = contract.tokenMetadataById.get(tokenId) as TokenMetadata;\n    \n    //we return the JsonToken\n    let jsonToken = new JsonToken({\n        tokenId: tokenId,\n        ownerId: token.owner_id,\n        metadata,\n        approvedAccountIds: token.approved_account_ids,\n        royalty: token.royalty\n    });\n    return jsonToken;\n}\n\n//implementation of the nft_transfer method. This transfers the NFT from the current owner to the receiver. \nexport function internalNftTransfer({\n    contract,\n    receiverId,\n    tokenId,\n    approvalId,\n    memo,\n}:{\n    contract: Contract, \n    receiverId: string, \n    tokenId: string, \n    approvalId: number\n    memo: string\n}) {\n    //assert that the user attached exactly 1 yoctoNEAR. This is for security and so that the user will be redirected to the NEAR wallet. \n    assertOneYocto();\n    //get the sender to transfer the token from the sender to the receiver\n    let senderId = near.predecessorAccountId();\n\n    //call the internal transfer method and get back the previous token so we can refund the approved account IDs\n    let previousToken = internalTransfer(\n        contract,\n        senderId,\n        receiverId,\n        tokenId,\n        approvalId,\n        memo,\n    );\n\n    //we refund the owner for releasing the storage used up by the approved account IDs\n    refundApprovedAccountIds(\n        previousToken.owner_id,\n        previousToken.approved_account_ids\n    );\n}\n\n//implementation of the transfer call method. This will transfer the NFT and call a method on the receiver_id contract\nexport function internalNftTransferCall({\n    contract,\n    receiverId,\n    tokenId,\n    approvalId,\n    memo,\n    msg\n}:{\n    contract: Contract,\n    receiverId: string, \n    tokenId: string, \n    approvalId: number,\n    memo: string,\n    msg: string  \n}) {\n    //assert that the user attached exactly 1 yocto for security reasons. \n    assertOneYocto();\n    //get the sender to transfer the token from the sender to the receiver\n    let senderId = near.predecessorAccountId();\n\n    //call the internal transfer method and get back the previous token so we can refund the approved account IDs\n    let previousToken = internalTransfer(\n        contract,\n        senderId,\n        receiverId,\n        tokenId,\n        approvalId,\n        memo,\n    );\n\n    // Initiating receiver's call and the callback\n    const promise = near.promiseBatchCreate(receiverId);\n    near.promiseBatchActionFunctionCall(\n        promise, \n        \"nft_on_transfer\", \n        bytes(JSON.stringify({ \n            sender_id: senderId,\n            previous_owner_id: previousToken.owner_id,\n            token_id: tokenId,\n            msg\n        })), \n        0, // no deposit \n        GAS_FOR_NFT_ON_TRANSFER\n    );\n\n    // We then resolve the promise and call nft_resolve_transfer on our own contract\n    near.promiseThen(\n        promise, \n        near.currentAccountId(), \n        \"nft_resolve_transfer\", \n        bytes(JSON.stringify({\n            owner_id: previousToken.owner_id,\n            receiver_id: receiverId,\n            token_id: tokenId,\n            approved_account_ids: previousToken.approved_account_ids\n        })), \n        0, // no deposit \n        GAS_FOR_RESOLVE_TRANSFER\n    );\n    return near.promiseReturn(promise);\n}\n\n//resolves the cross contract call when calling nft_on_transfer in the nft_transfer_call method\n//returns true if the token was successfully transferred to the receiver_id\nexport function internalResolveTransfer({\n    contract,\n    authorizedId,\n    ownerId,\n    receiverId,\n    tokenId,\n    approvedAccountIds,\n    memo\n}:{\n    contract: Contract,\n    authorizedId: string,\n    ownerId: string,\n    receiverId: string,\n    tokenId: string,\n    approvedAccountIds: { [key: string]: number },\n    memo: string    \n}) {\n    assert(near.currentAccountId() === near.predecessorAccountId(), \"Only the contract itself can call this method\");\n    // Whether receiver wants to return token back to the sender, based on `nft_on_transfer`\n    // call result.\n    let result = near.promiseResult(0);\n    if (typeof result === 'string') {\n        //As per the standard, the nft_on_transfer should return whether we should return the token to it's owner or not\n        //if we need don't need to return the token, we simply return true meaning everything went fine\n        if (result === 'false') {\n            /* \n                since we've already transferred the token and nft_on_transfer returned false, we don't have to \n                revert the original transfer and thus we can just return true since nothing went wrong.\n            */\n            //we refund the owner for releasing the storage used up by the approved account IDs\n            refundApprovedAccountIds(ownerId, approvedAccountIds);\n            return true;\n        }\n    }\n\n    //get the token object if there is some token object\n    let token = contract.tokensById.get(tokenId) as Token;\n    if (token != null) {\n        if (token.owner_id != receiverId) {\n            //we refund the owner for releasing the storage used up by the approved account IDs\n            refundApprovedAccountIds(ownerId, approvedAccountIds);\n            // The token is not owner by the receiver anymore. Can't return it.\n            return true;\n        }\n    //if there isn't a token object, it was burned and so we return true\n    } else {\n        //we refund the owner for releasing the storage used up by the approved account IDs\n        refundApprovedAccountIds(ownerId, approvedAccountIds);\n        return true;\n    }\n\n    //we remove the token from the receiver\n    internalRemoveTokenFromOwner(contract, receiverId, tokenId);\n    //we add the token to the original owner\n    internalAddTokenToOwner(contract, ownerId, tokenId);\n\n    //we change the token struct's owner to be the original owner \n    token.owner_id = ownerId\n\n    //we refund the receiver any approved account IDs that they may have set on the token\n    refundApprovedAccountIds(receiverId, token.approved_account_ids);\n    //reset the approved account IDs to what they were before the transfer\n    token.approved_account_ids = approvedAccountIds;\n\n    //we inset the token b  ack into the tokens_by_id collection\n    contract.tokensById.set(tokenId, token);\n\n    /*\n        We need to log that the NFT was reverted back to the original owner.\n        The old_owner_id will be the receiver and the new_owner_id will be the\n        original owner of the token since we're reverting the transfer.\n    */\n\n    // Construct the transfer log as per the events standard.\n    let nftTransferLog = {\n        // Standard name (\"nep171\").\n        standard: NFT_STANDARD_NAME,\n        // Version of the standard (\"nft-1.0.0\").\n        version: NFT_METADATA_SPEC,\n        // The data related with the event stored in a vector.\n        event: \"nft_transfer\",\n        data: [\n            {\n                // The optional authorized account ID to transfer the token on behalf of the old owner.\n                authorized_id: authorizedId,\n                // The old owner's account ID.\n                old_owner_id: receiverId,\n                // The account ID of the new owner of the token.\n                new_owner_id: ownerId,\n                // A vector containing the token IDs as strings.\n                token_ids: [tokenId],\n                // An optional memo to include.\n                memo,\n            }\n        ]\n    }\n\n    // Log the serialized json.\n    near.log(JSON.stringify(nftTransferLog));\n\n    //return false\n    return false\n}","// @ts-nocheck\nimport { Contract } from \"./contract\";\nimport { restoreOwners } from \"./internal\";\nimport { JsonToken } from \"./metadata\";\nimport { internalNftToken } from \"./nft_core\";\n\n//Query for the total supply of NFTs on the contract\nexport function internalTotalSupply({\n    contract\n}:{\n    contract: Contract\n}): number {\n    //return the length of the token metadata by ID\n    return contract.tokenMetadataById.len();\n}\n\n//Query for nft tokens on the contract regardless of the owner using pagination\nexport function internalNftTokens({\n    contract,\n    fromIndex,\n    limit\n}:{ \n    contract: Contract, \n    fromIndex?: string, \n    limit?: number\n}): JsonToken[] {\n    let tokens = [];\n\n    //where to start pagination - if we have a fromIndex, we'll use that - otherwise start from 0 index\n    let start = fromIndex ? parseInt(fromIndex) : 0;\n    //take the first \"limit\" elements in the array. If we didn't specify a limit, use 50\n    let max = limit ? limit : 50;\n\n    let keys = contract.tokenMetadataById.toArray();\n    // Paginate through the keys using the fromIndex and limit\n    for (let i = start; i < keys.length && i < start + max; i++) {\n        // get the token object from the keys\n        let jsonToken = internalNftToken({contract, tokenId: keys[i][0]});\n        tokens.push(jsonToken);\n    }\n    return tokens;\n}\n\n//get the total supply of NFTs for a given owner\nexport function internalSupplyForOwner({\n    contract,\n    accountId\n}:{\n    contract: Contract, \n    accountId: string\n}): number {\n    //get the set of tokens for the passed in owner\n    let tokens = restoreOwners(contract.tokensPerOwner.get(accountId));\n    //if there isn't a set of tokens for the passed in account ID, we'll return 0\n    if (tokens == null) {\n        return 0\n    }\n\n    //if there is some set of tokens, we'll return the length \n    return tokens.len();\n}\n\n//Query for all the tokens for an owner\nexport function internalTokensForOwner({\n    contract,\n    accountId,\n    fromIndex,\n    limit\n}:{\n    contract: Contract, \n    accountId: string, \n    fromIndex?: string, \n    limit?: number\n}): JsonToken[] {\n    //get the set of tokens for the passed in owner\n    let tokenSet = restoreOwners(contract.tokensPerOwner.get(accountId));\n\n    //if there isn't a set of tokens for the passed in account ID, we'll return 0\n    if (tokenSet == null) {\n        return [];\n    }\n    \n    //where to start pagination - if we have a fromIndex, we'll use that - otherwise start from 0 index\n    let start = fromIndex ? parseInt(fromIndex) : 0;\n    //take the first \"limit\" elements in the array. If we didn't specify a limit, use 50\n    let max = limit ? limit : 50;\n\n    let keys = tokenSet.toArray();\n    let tokens: JsonToken[] = []\n    for(let i = start; i < max; i++) {\n        if(i >= keys.length) {\n            break;\n        }\n        let token = internalNftToken({contract, tokenId: keys[i]});\n        tokens.push(token);\n    }\n    return tokens;\n}","// @ts-nocheck\nimport { assert, bytes, near } from \"near-sdk-js\";\nimport { Contract } from \"./contract\";\nimport { assertAtLeastOneYocto, assertOneYocto, bytesForApprovedAccountId, internalAddTokenToOwner, refundDeposit, refundApprovedAccountIds, refundApprovedAccountIdsIter } from \"./internal\";\nimport { Token } from \"./metadata\";\n\nconst GAS_FOR_NFT_ON_APPROVE = 35_000_000_000_000;\n\n//approve an account ID to transfer a token on your behalf\nexport function internalNftApprove({\n    contract,\n    tokenId,\n    accountId,\n    msg\n}:{ \n    contract: Contract, \n    tokenId: string, \n    accountId: string, \n    msg: string \n}) {\n    /*\n        assert at least one yocto for security reasons - this will cause a redirect to the NEAR wallet.\n        The user needs to attach enough to pay for storage on the contract\n    */\n    assertAtLeastOneYocto();\n\n    //get the token object from the token ID\n    let token = contract.tokensById.get(tokenId) as Token;\n    if (token == null) {\n        near.panic(\"no token\");\n    }\n    //make sure that the person calling the function is the owner of the token\n    assert(near.predecessorAccountId() === token.owner_id, \"Predecessor must be the token owner\");\n\n    //get the next approval ID if we need a new approval\n    let approvalId = token.next_approval_id;\n\n    //check if the account has been approved already for this token\n    let isNewApproval = token.approved_account_ids.hasOwnProperty(accountId);\n    token.approved_account_ids[accountId] = approvalId;\n\n    //if it was a new approval, we need to calculate how much storage is being used to add the account.\n    let storageUsed = isNewApproval ? bytesForApprovedAccountId(accountId) : 0;\n\n    //increment the token's next approval ID by 1\n    token.next_approval_id += 1;\n    //insert the token back into the tokens_by_id collection\n    contract.tokensById.set(tokenId, token);\n\n    //refund any excess storage attached by the user. If the user didn't attach enough, panic. \n    refundDeposit(BigInt(storageUsed));\n    \n    //if some message was passed into the function, we initiate a cross contract call on the\n    //account we're giving access to. \n    if (msg != null) {\n        // Initiating receiver's call and the callback\n        const promise = near.promiseBatchCreate(accountId);\n        near.promiseBatchActionFunctionCall(\n            promise, \n            \"nft_on_approve\", \n            bytes(JSON.stringify({ \n                token_id: tokenId,\n                owner_id: token.owner_id,\n                approval_id: approvalId,\n                msg\n            })), \n            0, // no deposit \n            GAS_FOR_NFT_ON_APPROVE\n        );\n\n        near.promiseReturn(promise);\n    }\n}\n\n//check if the passed in account has access to approve the token ID\nexport function internalNftIsApproved({\n    contract,\n    tokenId,\n    approvedAccountId,\n    approvalId\n}:{ \n    contract: Contract, \n    tokenId: string,\n    approvedAccountId: string, \n    approvalId: number \n}) {\n    //get the token object from the token_id\n    let token = contract.tokensById.get(tokenId) as Token;\n    if (token == null) {\n        near.panic(\"no token\");\n    }\n\n    //get the approval number for the passed in account ID\n    let approval = token.approved_account_ids[approvedAccountId];\n\n    //if there was no approval ID found for the account ID, we simply return false\n    if (approval == null) {\n        return false\n    }\n\n    //if there was some approval ID found for the account ID\n    //if there was no approval_id passed into the function, we simply return true\n    if (approvalId == null) {\n        return true\n    }\n\n    //if a specific approval_id was passed into the function\n    //return if the approval ID passed in matches the actual approval ID for the account\n    return approvalId == approval;\n}\n\n//revoke a specific account from transferring the token on your behalf\nexport function internalNftRevoke({\n    contract,\n    tokenId,\n    accountId\n}:{ \n    contract: Contract, \n    tokenId: string, \n    accountId: string \n}) {\n    //assert that the user attached exactly 1 yoctoNEAR for security reasons\n    assertOneYocto();\n\n    //get the token object using the passed in token_id\n    let token = contract.tokensById.get(tokenId) as Token;\n    if (token == null) {\n        near.panic(\"no token\");\n    }\n\n    //get the caller of the function and assert that they are the owner of the token\n    let predecessorAccountId = near.predecessorAccountId();\n    assert(predecessorAccountId == token.owner_id, \"only token owner can revoke\");\n     \n    //if the account ID was in the token's approval, we remove it\n    if (token.approved_account_ids.hasOwnProperty(accountId)) {\n        delete token.approved_account_ids[accountId];\n        \n        //refund the funds released by removing the approved_account_id to the caller of the function\n        refundApprovedAccountIdsIter(predecessorAccountId, [accountId]);\n        \n        //insert the token back into the tokens_by_id collection with the account_id removed from the approval list\n        contract.tokensById.set(tokenId, token);\n    }\n}\n\n//revoke all accounts from transferring the token on your behalf\nexport function internalNftRevokeAll({\n    contract,\n    tokenId\n}:{ \n    contract: Contract, \n    tokenId: string \n}) {\n    //assert that the caller attached exactly 1 yoctoNEAR for security\n    assertOneYocto();\n\n    //get the token object from the passed in token ID\n    let token = contract.tokensById.get(tokenId) as Token;\n    if (token == null) {\n        near.panic(\"no token\");\n    }\n\n    //get the caller and make sure they are the owner of the tokens\n    let predecessorAccountId = near.predecessorAccountId();\n    assert(predecessorAccountId == token.owner_id, \"only token owner can revoke\");\n\n    //only revoke if the approved account IDs for the token is not empty\n    if (token.approved_account_ids && Object.keys(token.approved_account_ids).length === 0 && Object.getPrototypeOf(token.approved_account_ids) === Object.prototype) {\n        //refund the approved account IDs to the caller of the function\n        refundApprovedAccountIds(predecessorAccountId, token.approved_account_ids);\n        //clear the approved account IDs\n        token.approved_account_ids = {};\n        //insert the token back into the tokens_by_id collection with the approved account IDs cleared\n        contract.tokensById.set(tokenId, token);\n    }\n}","\nimport { NearBindgen, near, call, view, LookupMap, UnorderedMap, Vector, UnorderedSet, LookupSet, assert } from 'near-sdk-js'\nimport { NFTContractMetadata, Token, TokenMetadata, internalNftMetadata } from './metadata';\nimport { internalMint } from './mint';\nimport { internalNftTokens, internalSupplyForOwner, internalTokensForOwner, internalTotalSupply } from './enumeration';\nimport { internalNftToken, internalNftTransfer, internalNftTransferCall, internalResolveTransfer } from './nft_core';\nimport { internalNftApprove, internalNftIsApproved, internalNftRevoke, internalNftRevokeAll } from './approval';\nimport { internalNftPayout, internalNftTransferPayout } from './royalty';\n\n/// This spec can be treated like a version of the standard.\nexport const NFT_METADATA_SPEC = \"nft-1.0.0\";\n\n/// This is the name of the NFT standard we're using\nexport const NFT_STANDARD_NAME = \"nep171\";\n\n// @NearBindgen({})\nexport class Contract {\n    owner_id: string;\n    tokensPerOwner: LookupMap;\n    tokensById: LookupMap;\n    tokenMetadataById: UnorderedMap;\n    metadata: NFTContractMetadata;\n    currentTokenId: 0;\n    applicantsInQueue: LookupSet;\n\n    /*\n        initialization function (can only be called once).\n        this initializes the contract with metadata that was passed in and\n        the owner_id.\n    */\n    constructor({\n        owner_id, \n        metadata = {\n            spec: \"nft-1.0.0\",\n            name: \"NFT Certificate\",\n            symbol: \"ED3\"\n        } \n    }) {\n        this.owner_id = owner_id;\n        this.tokensPerOwner = new LookupMap(\"tokensPerOwner\");\n        this.tokensById = new LookupMap(\"tokensById\");\n        this.tokenMetadataById = new UnorderedMap(\"tokenMetadataById\");\n        this.applicantsInQueue = new LookupSet(\"applicantsInQueue\");\n        this.metadata = metadata;\n    }\n\n    default() {\n        return new Contract({owner_id: ''})\n    }\n\n    /*\n        QUEUE\n    */\n\n    // Add applicant to queue for review and charge them a fee\n    @call({payableFunction: true})\n    addApplicantToQueue({}) {\n        let attachedAmount: bigint = near.attachedDeposit() as bigint;\n        assert(attachedAmount > BigInt(2000000000000000000000000), `Attach at least ${ BigInt(2000000000000000000000000)} yoctoNEAR`);\n        this.applicantsInQueue.set(near.predecessorAccountId());\n    }\n\n    /*\n        MINT\n    */\n    @call({})\n    nft_mint({ metadata, receiver_id }) {\n        var metadataParsed = JSON.parse(metadata);\n        near.log(`IN CONTRACT CODE :${metadataParsed}`);\n        return internalMint({ contract: this, tokenId: this.nft_total_supply().toString(), metadata: metadataParsed, receiverId: receiver_id, perpetualRoyalties: null });\n    }\n\n    /*\n        CORE\n    */\n    @view({})\n    //get the information for a specific token ID\n    nft_token({ token_id }) {\n        return internalNftToken({ contract: this, tokenId: token_id });\n    }\n\n    @call({})\n    //implementation of the nft_transfer method. This transfers the NFT from the current owner to the receiver. \n    nft_transfer({ receiver_id, token_id, approval_id, memo }) {\n      throw Error;\n        // return internalNftTransfer({ contract: this, receiverId: receiver_id, tokenId: token_id, approvalId: approval_id, memo: memo });\n    }\n\n    @call({})\n    //implementation of the transfer call method. This will transfer the NFT and call a method on the receiver_id contract\n    nft_transfer_call({ receiver_id, token_id, approval_id, memo, msg }) {\n      throw Error;  \n      // return internalNftTransferCall({ contract: this, receiverId: receiver_id, tokenId: token_id, approvalId: approval_id, memo: memo, msg: msg });\n    }\n\n    @call({})\n    //resolves the cross contract call when calling nft_on_transfer in the nft_transfer_call method\n    //returns true if the token was successfully transferred to the receiver_id\n    nft_resolve_transfer({ authorized_id, owner_id, receiver_id, token_id, approved_account_ids, memo }) {\n      throw Error;  \n      // return internalResolveTransfer({ contract: this, authorizedId: authorized_id, ownerId: owner_id, receiverId: receiver_id, tokenId: token_id, approvedAccountIds: approved_account_ids, memo: memo });\n    }\n\n    /*\n        APPROVALS\n    */\n    @view({})\n    //check if the passed in account has access to approve the token ID\n    nft_is_approved({ token_id, approved_account_id, approval_id }) {\n        return internalNftIsApproved({ contract: this, tokenId: token_id, approvedAccountId: approved_account_id, approvalId: approval_id });\n    }\n\n    @call({})\n    //approve an account ID to transfer a token on your behalf\n    nft_approve({ token_id, account_id, msg }) {\n        return internalNftApprove({ contract: this, tokenId: token_id, accountId: account_id, msg: msg });\n    }\n\n    /*\n        ROYALTY\n    */\n    // @view({})\n    // //calculates the payout for a token given the passed in balance. This is a view method\n    // nft_payout({ token_id, balance, max_len_payout }) {\n    //     return internalNftPayout({ contract: this, tokenId: token_id, balance: balance, maxLenPayout: max_len_payout });\n    // }\n\n    // @call({})\n    // //transfers the token to the receiver ID and returns the payout object that should be payed given the passed in balance. \n    // nft_transfer_payout({ receiver_id, token_id, approval_id, memo, balance, max_len_payout }) {\n    //     return internalNftTransferPayout({ contract: this, receiverId: receiver_id, tokenId: token_id, approvalId: approval_id, memo: memo, balance: balance, maxLenPayout: max_len_payout });\n    // }\n\n    // @call({})\n    // //approve an account ID to transfer a token on your behalf\n    // nft_revoke({ token_id, account_id }) {\n    //     return internalNftRevoke({ contract: this, tokenId: token_id, accountId: account_id });\n    // }\n\n    // @call({})\n    // //approve an account ID to transfer a token on your behalf\n    // nft_revoke_all({ token_id }) {\n    //     return internalNftRevokeAll({ contract: this, tokenId: token_id });\n    // }\n\n    /*\n        ENUMERATION\n    */\n    @view({})\n    //Query for the total supply of NFTs on the contract\n    nft_total_supply() {\n        return internalTotalSupply({ contract: this });\n    }\n\n    @view({})\n    //Query for nft tokens on the contract regardless of the owner using pagination\n    nft_tokens({ from_index, limit }) {\n        return internalNftTokens({ contract: this, fromIndex: from_index, limit: limit });\n    }\n\n    @view({})\n    //get the total supply of NFTs for a given owner\n    nft_tokens_for_owner({ account_id, from_index, limit }) {\n        return internalTokensForOwner({ contract: this, accountId: account_id, fromIndex: from_index, limit: limit });\n    }\n\n    @view({})\n    //Query for all the tokens for an owner\n    nft_supply_for_owner({ account_id }) {\n        return internalSupplyForOwner({ contract: this, accountId: account_id });\n    }\n\n    /*\n        METADATA\n    */\n    @view({})\n    //Query for all the tokens for an owner\n    nft_metadata() {\n        return internalNftMetadata({ contract: this });\n    }\n}\n\n// import { NearBindgen, near, call, view } from 'near-sdk-js';\n\n// @NearBindgen({})\n// class HelloNear {\n//   greeting: string = \"Hello\";\n\n//   @view({}) // This method is read-only and can be called for free\n//   get_greeting(): string {\n//     return this.greeting;\n//   }\n\n//   @call({}) // This method changes the state, for which it cost gas\n//   set_greeting({ message }: { message: string }): void {\n//     // Record a log permanently to the blockchain!\n//     near.log(`Saving greeting ${message}`);\n//     this.greeting = message;\n//   }\n// }"],"names":["PromiseResult","PromiseError","u8ArrayToBytes","array","ret","e","String","fromCharCode","bytesToU8Array","bytes","Uint8Array","length","i","charCodeAt","strOrU8Array","checkStringIsBytes","Error","str","assert","b","assertNumber","n","Number","isSafeInteger","chain","args","wrap","a","c","encode","Array","from","reverse","reduce","acc","undefined","decode","alphabet","digits","isArray","map","input","letter","index","indexOf","join","separator","to","split","padding","bits","chr","data","push","end","slice","normalize","fn","convertRadix","pos","res","forEach","d","carry","done","digit","digitBase","Math","floor","gcd","radix2carry","convertRadix2","mask","radix","num","radix2","revPadding","unsafeWrapper","apply","base16","base32","s","toUpperCase","replace","base64","base64url","genBase58","abc","base58","XMR_BLOCK_LEN","base58xmr","block","subarray","padStart","blockLen","j","concat","BECH_ALPHABET","POLYMOD_GENERATORS","bech32Polymod","pre","chk","bechChecksum","prefix","words","encodingConst","len","v","genBech32","encoding","ENCODING_CONST","_words","fromWords","toWords","fromWordsUnsafe","limit","actualLength","TypeError","toLowerCase","lowered","sepIndex","lastIndexOf","sum","endsWith","decodeUnsafe","decodeToBytes","utf8","TextDecoder","TextEncoder","hex","CODERS","Object","keys","CurveType","U64_MAX","EVICTED_REGISTER","log","params","env","x","JSON","stringify","predecessorAccountId","predecessor_account_id","read_register","attachedDeposit","attached_deposit","storageRead","key","storage_read","storageHasKey","storage_has_key","storageGetEvicted","currentAccountId","current_account_id","storageUsage","storage_usage","promiseBatchCreate","accountId","promise_batch_create","promiseBatchActionFunctionCall","promiseIndex","methodName","amount","gas","promise_batch_action_function_call","promiseBatchActionTransfer","promise_batch_action_transfer","promiseReturn","promiseIdx","promise_return","storageWrite","value","exist","storage_write","storageRemove","storage_remove","storageByteCost","call","privateFunction","payableFunction","target","descriptor","originalMethod","near","BigInt","view","LookupMap","constructor","keyPrefix","containsKey","storageKey","get","raw","parse","remove","set","storageValue","extend","objects","kv","serialize","deserialize","ERR_INDEX_OUT_OF_BOUNDS","ERR_INCONSISTENT_STATE","indexToKey","Uint32Array","buffer","Vector","isEmpty","swapRemove","pop","last","element","lastIndex","lastKey","elements","Symbol","iterator","VectorIterator","clear","toArray","vector","current","next","LookupSet","contains","UnorderedMap","values","keysLen","keysIsEmpty","valueAndIndex","oldValue","nextIndex","oldValueAndIndex","swappedKey","swappedValueAndIndex","UnorderedMapIterator","kvs","k","unorderedMap","serializeIndex","deserializeIndex","rawIndex","UnorderedSet","elementIndexPrefix","elementsPrefix","indexLookup","nextIndexRaw","indexRaw","lastElement","lastLookupElement","Token","ownerId","approvedAccountIds","nextApprovalId","royalty","owner_id","approved_account_ids","next_approval_id","JsonToken","tokenId","metadata","token_id","internalNftMetadata","contract","restoreOwners","collection","refundDeposit","storageUsed","requiredCost","valueOf","refund","promise","bytesForApprovedAccountId","assertAtLeastOneYocto","internalAddTokenToOwner","tokenSet","tokensPerOwner","toString","internalMint","receiverId","perpetualRoyalties","initialStorageUsage","entries","account","token","tokensById","tokenMetadataById","nftMintLog","standard","NFT_STANDARD_NAME","version","NFT_METADATA_SPEC","event","token_ids","requiredStorageInBytes","internalNftToken","jsonToken","internalTotalSupply","internalNftTokens","fromIndex","tokens","start","parseInt","max","internalSupplyForOwner","internalTokensForOwner","GAS_FOR_NFT_ON_APPROVE","internalNftApprove","msg","approvalId","isNewApproval","hasOwnProperty","approval_id","internalNftIsApproved","approvedAccountId","approval","Contract","spec","name","symbol","applicantsInQueue","default","addApplicantToQueue","attachedAmount","nft_mint","receiver_id","metadataParsed","nft_total_supply","nft_token","nft_transfer","memo","nft_transfer_call","nft_resolve_transfer","authorized_id","nft_is_approved","approved_account_id","nft_approve","account_id","nft_tokens","from_index","nft_tokens_for_owner","nft_supply_for_owner","nft_metadata"],"mappings":"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"}